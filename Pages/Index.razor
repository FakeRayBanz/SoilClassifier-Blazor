@page "/"

<PageTitle>Soil Classifier</PageTitle>

<section>
    <h1>Soil Classifier</h1>
    <div>Please enter the below values of your sample to classify it.</div>
    <div class="inputGroup">
        <div class="inputContainer">
            <label>Percentage of fine (&lt;0.075mm) material</label>
            <input type="text" @bind=finePercentInput @oninput="FieldUpdate" />
        </div>
        <div class="inputContainer">
            <label>Percentage of gravel (&gt;2.36mm) material</label>
            <input type="text" @bind=gravelPercentInput @oninput="FieldUpdate" />
        </div>
        <div class="inputContainer">
            <label>Plastic Limit (%)</label>
            <input type="text" @bind=plasticLimitInput @oninput="FieldUpdate" />
        </div>
        <div class="inputContainer">
            <label>Liquid Limit (%)</label>
            <input type="text" @bind=liquidLimitInput @oninput="FieldUpdate" />
        </div>
    </div>
    <button class="calcButton" @onclick="HandleCalculate">@buttonText</button>
</section>



@code {

    

    string finePercentInput;
    string gravelPercentInput;
    string plasticLimitInput;
    string liquidLimitInput;
    string buttonText = "Calculate";
    string result;

    void FieldUpdate()
    {
        buttonText = "Calculate";
    }

    void HandleCalculate()
    {
        double finePercent = Convert.ToDouble(finePercentInput);
        double gravelPercent = Convert.ToDouble(gravelPercentInput);
        double sandPercent = 100 - gravelPercent - finePercent;
        double plasticLimit = Convert.ToDouble(plasticLimitInput);
        double liquidLimit = Convert.ToDouble(liquidLimitInput);

        double plasticityIndex = liquidLimit - plasticLimit;

        string fineOrCoarse;
        string fineMaterial = "";
        string plasticitySymbol = "";

        if (finePercent >= 35)
        {
            Console.WriteLine("Your sample is fine grained.");
            fineOrCoarse = "fine";
        }
        else
        {
            Console.WriteLine("Your sample is coarse grained.");
            fineOrCoarse = "coarse";
        }

        void CalcPlasticitySymbol()
        {
            switch (liquidLimit)
            {
                case <= 26:
                    if (plasticityIndex < 8)
                    {
                        fineMaterial = "silt";
                        plasticitySymbol = "ML";

                    }
                    else
                    {
                        fineMaterial = "clay";
                        plasticitySymbol = "CL";
                    }
                    break;
                case > 26 and <= 50:
                    if (plasticityIndex < 0.73 * (liquidLimit - 20))
                    {
                        fineMaterial = "silt";
                        plasticitySymbol = "ML";
                    }
                    else if (plasticityIndex > 0.73 * (liquidLimit - 20) && liquidLimit <= 35)
                    {
                        fineMaterial = "clay";
                        plasticitySymbol = "CL";
                    }
                    else if (plasticityIndex > 0.73 * (liquidLimit - 20) && liquidLimit > 35)
                    {
                        fineMaterial = "clay";
                        plasticitySymbol = "CI";
                    }
                    break;
                case > 50:
                    if (plasticityIndex < 0.73 * (liquidLimit - 20))
                    {
                        fineMaterial = "silt";
                        plasticitySymbol = "MH";
                    }
                    else if (plasticityIndex > 0.73 * (liquidLimit - 20))
                    {
                        fineMaterial = "clay";
                        plasticitySymbol = "CH";
                    }
                    break;
                default:
                    break;
            }
        }

        CalcPlasticitySymbol();

        string primary = "";
        string[] secondary = new string[] { };
        string[] prefix = new string[] { };
        string[] trace = new string[] { };

        if (fineOrCoarse == "fine")
        {
            primary = fineMaterial.ToUpper();
        }
        else if (fineOrCoarse == "coarse")
        {
            if (gravelPercent > sandPercent)
            {
                primary = "GRAVEL";
            }
            else if (sandPercent > gravelPercent)
            {
                primary = "SAND";
            }
        }

        switch (primary)
        {
            case "GRAVEL":
                AppendSand();
                AppendFine();
                break;
            case "SAND":
                AppendGravel();
                AppendFine();
                break;
            case "CLAY" or "SILT":
                AppendGravel();
                AppendSand();
                break;
            default:
                break;
        }

        void AppendGravel()
        {
            switch (gravelPercent)
            {
                case <= 15:
                    trace = trace.Append("gravel").ToArray();
                    break;

                case > 15 and <= 30:
                    secondary = secondary.Append("gravel").ToArray();
                    break;

                case > 30:
                    prefix = prefix.Append("gravelly").ToArray();
                    break;

                default:
                    break;
            }
        }

        void AppendSand()
        {
            switch (sandPercent)
            {
                case <= 15:
                    trace = trace.Append("sand").ToArray();
                    break;

                case > 15 and <= 30:
                    secondary = secondary.Append("sand").ToArray();
                    break;

                case > 30:
                    prefix = prefix.Append("sandy").ToArray();
                    break;

                default:
                    break;
            }
        }

        void AppendFine()
        {
            switch (finePercent)
            {
                case <= 5:
                    trace = trace.Append(fineMaterial).ToArray();
                    break;

                case > 5 and <= 12:
                    secondary = secondary.Append(fineMaterial).ToArray();
                    break;

                case > 12:
                    if (fineMaterial == "clay")
                    {
                        prefix = prefix.Append("clayey").ToArray();
                    }
                    else if (fineMaterial == "silt")
                    {
                        prefix = prefix.Append("silty").ToArray();
                    }
                    break;

                default:
                    break;
            }
        }


        // Group Symbol Calculation
        string groupSymbol = "";

        void SymbolCalculation()
        {
            switch (primary)
            {
                case "GRAVEL":
                    switch (finePercent)
                    {
                        // TODO: Add coeficient of Uniformity and Curvature check
                        case <= 5:
                            groupSymbol = "GP";
                            break;

                        case > 5 and < 12:
                            switch (fineMaterial)
                            {
                                case "clay":
                                    groupSymbol = "GP-GC";
                                    break;

                                case "silt":
                                    groupSymbol = "GP-GM";
                                    break;

                                default:
                                    break;
                            }
                            break;

                        case >= 12:
                            switch (fineMaterial)
                            {
                                case "clay":
                                    groupSymbol = "GC";
                                    break;

                                case "silt":
                                    groupSymbol = "GM";
                                    break;

                                default:
                                    break;
                            }
                            break;

                        default:
                            break;
                    }
                    break;

                case "SAND":
                    switch (finePercent)
                    {
                        // TODO: Add coeficient of Uniformity and Curvature check
                        case <= 5:
                            groupSymbol = "SP";
                            break;

                        case > 5 and < 12:
                            switch (fineMaterial)
                            {
                                case "clay":
                                    groupSymbol = "SP-SC";
                                    break;

                                case "silt":
                                    groupSymbol = "SP-SM";
                                    break;

                                default:
                                    break;
                            }
                            break;

                        case >= 12:
                            switch (fineMaterial)
                            {
                                case "clay":
                                    groupSymbol = "SC";
                                    break;

                                case "silt":
                                    groupSymbol = "SM";
                                    break;

                                default:
                                    break;
                            }
                            break;

                        default:
                            break;
                    }
                    break;

                case "CLAY":
                    groupSymbol = plasticitySymbol;
                    break;

                case "SILT":
                    groupSymbol = plasticitySymbol;
                    break;

                default:
                    break;
            }
        }

        SymbolCalculation();


        string prefixPrimarySeparator = "";
        string primarySecondarySeparator = "";
        string secondaryTraceSeparator = "";

        if (prefix.Length != 0)
        {
            prefixPrimarySeparator = " ";
        }

        if (secondary.Length != 0)
        {
            primarySecondarySeparator = " with ";
        }

        if (trace.Length != 0)
        {
            secondaryTraceSeparator = ", trace ";
        }


        result = "[" + groupSymbol + "] " + String.Join(" ", prefix) + prefixPrimarySeparator +
                 primary + primarySecondarySeparator + String.Join(" and ", secondary) +
                 secondaryTraceSeparator + String.Join(" and ", trace);

        buttonText = result;
    }
}