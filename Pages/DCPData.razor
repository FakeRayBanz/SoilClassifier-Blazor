@page "/dcpdata"

@using Blazored.FluentValidation;
@using FluentValidation

@inject ListState listState


@if (listState.soilSamples == null)
{
    <h4>Please import data before entering DCP Values</h4>
}
else
{
    <h1>DCP Data</h1>
    <p>Please enter start and end depths in mm for each borehole, then values for each depth.</p>
    <div class="DCPContainer">
        @foreach (var boreHole in listState.BoreHoleList)
        {
            var _depthList = new List<int>();
            void GenerateDepths()
            {
                var tempList = new List<int>();
                var firstHundred = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(boreHole.DCPStartingDepth) / 100.0) * 100);
                if (firstHundred != Convert.ToInt32(boreHole.DCPStartingDepth))
                {
                    tempList.Add(Convert.ToInt32(boreHole.DCPStartingDepth));
                }
                var lastHundred = Convert.ToInt32(Math.Floor(Convert.ToDouble(boreHole.DCPEndingDepth) / 100.0) * 100);
                for (int i = firstHundred; i <= lastHundred; i += 100)
                {
                    tempList.Add(i);
                }
                if (lastHundred != Convert.ToInt32(boreHole.DCPEndingDepth))
                {
                    tempList.Add(Convert.ToInt32(boreHole.DCPEndingDepth));
                }
                boreHole.DCPDepths = tempList;
            }

            <div class="boreContainer">
                <h4>BH @boreHole.BoreNumber</h4>
                <EditForm style="display:flex; flex-direction:column;" autocomplete="off" Model="@boreHole" OnValidSubmit="GenerateDepths">
                    <DataAnnotationsValidator />
                    @*TODO: Input validation >0*@
                    <ValidationMessage For="() => boreHole.DCPStartingDepth" />
                    <ValidationMessage For="() => boreHole.DCPEndingDepth" />
                    
                    <div style="display:flex; flex-direction:row">
                        <InputNumber class="depthRangeInput" inputmode="decimal" placeholder="0" @bind-Value="boreHole.DCPStartingDepth" />

                        <InputNumber class="depthRangeInput" inputmode="decimal" placeholder="1000" @bind-Value="boreHole.DCPEndingDepth" />
                        <button class="depthRangeButton" type="submit">
                            Apply
                        </button>
                    </div>


                </EditForm>

                <EditForm class="blazorForm" autocomplete="off" Model="boreHole" OnValidSubmit="CalculateCBR">
                    <FluentValidationValidator @ref="fluentValidationValidator" />

                    @if (boreHole.DCPDepths.Count != 0)
                    {
                        <div class="DCPInputGroup">
                            <div class="DCPInputContainer">
                                <label style="margin-right: 35px;">Depth</label>
                                <label style="margin-right: 10px;"># of blows</label>
                            </div>
                            @foreach (var depth in boreHole.DCPDepths)
                            {
                                <div class="DCPInputContainer">
                                    <label for="DCPDepth">@depth</label>
                                    <ValidationMessage For="() => boreHole.BoreNumber" />
                                    <InputNumber inputmode="decimal" id="DCPDepth" @bind-Value="@DCPValue" />
                                </div>
                            }
                        </div>
                        <button class="calcButton" type="submit">
                            Save
                        </button>
                    }



                </EditForm>
            </div>

        }
    </div>
}

@code {

    private FluentValidationValidator? fluentValidationValidator;
    int? DCPValue;


    void CalculateCBR()
    {

    }
}
