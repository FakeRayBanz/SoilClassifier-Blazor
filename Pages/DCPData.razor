@page "/dcpdata"

@using Blazored.FluentValidation;
@using FluentValidation
@using SoilClassifier_Blazor.Models

@inject ListState listState


@if (listState.soilSamples == null)
{
    <h4>Please import data before entering DCP Values</h4>
}
else
{
    <h1>DCP Data</h1>
    <p>Please enter start and end depths in mm for each borehole, then values for each depth.</p>
    <button class="btn btn-primary" @onclick="LoadDemoData">Load Demo Data</button>
    <div class="DCPContainer">
        @foreach (var boreHole in listState.BoreHoleList)
        {
            @*void GenerateDepths()
            {
                
            }*@

            <div class="boreContainer">
                <h4>BH @boreHole.BoreNumber</h4>
                <EditForm style="display:flex; flex-direction:column;" autocomplete="off" Model="@boreHole" OnValidSubmit="boreHole.GenerateDepths">
                    <DataAnnotationsValidator />
                    @*TODO: Dynamic Input validation >0*@
                    <ValidationMessage For="() => boreHole.DCPStartingDepth" />
                    <ValidationMessage For="() => boreHole.DCPEndingDepth" />

                    <div style="display:flex; flex-direction:row">
                        <InputNumber class="depthRangeInput" inputmode="decimal" placeholder="0" @bind-Value="boreHole.DCPStartingDepth" />
                        <InputNumber class="depthRangeInput" inputmode="decimal" placeholder="1000" @bind-Value="boreHole.DCPEndingDepth" />
                        <button class="depthRangeButton" type="submit">
                            Apply
                        </button>
                    </div>
                </EditForm>

                <EditForm class="blazorForm" autocomplete="off" Model="boreHole" OnValidSubmit="CalculateCBR">
                    <FluentValidationValidator @ref="fluentValidationValidator" />

                    @if (boreHole.DCPData.Count != 0)
                    {
                        var count = 0;
                        <div class="DCPInputGroup">
                            <div class="DCPInputContainer">
                                <label>Depth</label>
                                <label># of blows</label>
                                <label>CBR</label>
                            </div>
                            @foreach (var layer in boreHole.DCPData)
                            {
                                <div class="DCPInputContainer">
                                    <label style="width:40px; text-align:right" for="DCPDepth">@layer.Depth</label>
                                    <ValidationMessage For="() => layer.Blows" />
                                    @if (count == 0)
                                    {
                                        <InputNumber disabled inputmode="decimal" id="DCPDepth" @bind-Value="@layer.Blows" />
                                    }
                                    else
                                    {
                                    <InputNumber inputmode="decimal" id="DCPDepth" @bind-Value="@layer.Blows" />
                                    }
                                    <label style="width:30px">@layer.CBR</label>
                                </div>
                                count++;
                            }
                        </div>
                        <button class="calcButton" style="background-color:#007aff; color:white; border-color:#007aff" type="submit">
                            Save
                        </button>
                    }



                </EditForm>
            </div>

        }
    </div>
}

@code {

    private FluentValidationValidator? fluentValidationValidator;

    void CalculateCBR()
    {
        // Currently evaluates all boreholes at once on submit of a single borehole,
        // monitor for performance impact
        foreach (var boreHole in listState.BoreHoleList)
        {
            for (var i = 1; i < boreHole.DCPData.Count(); i++)
            {
                if (boreHole.DCPData[i].Blows != null)
                {
                    int distance = boreHole.DCPData[i].Depth - boreHole.DCPData[i - 1].Depth;
                    double? mmPerBlow = Convert.ToDouble(distance) / Convert.ToDouble(boreHole.DCPData[i].Blows);
                    double tempCBR = 83.048 * Math.Pow(Convert.ToDouble(mmPerBlow), -0.7191);
                    tempCBR = Math.Round(2 * tempCBR, MidpointRounding.AwayFromZero) / 2;
                    if (tempCBR > 25)
                    {
                        boreHole.DCPData[i].CBR = ">25";
                    }
                    else
                    {
                        boreHole.DCPData[i].CBR = Convert.ToString(tempCBR);
                    }
                }
            }
        }
    }
    void LoadDemoData()
    {
        foreach (var boreHole in listState.BoreHoleList)
        {
            boreHole.DCPStartingDepth = 100;
            boreHole.DCPEndingDepth = 1000;
            boreHole.GenerateDepths();
            var randomGen = new Random();
            for (var i = 1; i < boreHole.DCPData.Count(); i++)
            {
                boreHole.DCPData[i].Blows = randomGen.Next(1, 22);
            }
            CalculateCBR();
        }
    }
}
