@page "/importdata"
@using SoilClassifier_Blazor.Models
@using System.IO
@using CsvHelper
@using System.Globalization

@inject HttpClient Http

@inject ListState listState

<PageTitle>Soil Classifier Import</PageTitle>

@if (showGroupedModal == true)
{
    <div class="ModalContainer">
        <div class="backgroundModal" @onclick="GroupedModalStateToggle" />

        <div class="groupedSamplesModal">
            <h2>Grouped Samples</h2>
            <div style="display:flex; flex-direction:row; gap:25px; font-weight:600; justify-content:space-between; width:100%">
                <span>Base Sample</span>
                <span>Matched Samples</span>
            </div>

            <EditForm class="blazorForm" style="display:flex; flex-direction:column;" autocomplete="off" Model="@listState.GroupedSamples" OnValidSubmit="ApplyGroupedSamples">

                @foreach (var group in listState.GroupedSamples)
                {
                    <div style="display:flex; flex-direction:row;">
                        <InputNumber class="groupedSampleInput" style="margin-right:80px; height: 40px;" inputmode="decimal" id="BaseSample" @bind-Value="@group.BaseSample" />
                        @foreach (var sample in group.MatchedSamples)
                        {
                            <InputNumber class="groupedSampleInput" inputmode="decimal" id="MatchedSample" @bind-Value="@sample.SingleMatchedSample" />
                        }
                        <button class="btn btn-primary" type="button" style="height: 40px; width: 40px; margin:1px;" @onclick="() => group.MatchedSamples.Add(new MatchedSample())">+</button>
                    </div>
                }
                <button class="btn btn-primary" type="button" style="margin: 1px; margin-bottom:20px; height:40px; width:40px;" @onclick="AddGroup">+</button>
                <button class="btn btn-primary" type="submit">Save</button>
            </EditForm>
        </div>
    </div>
}

@if (showVisualModal == true)
{
    <div class="ModalContainer">
        <div class="backgroundModal" @onclick="VisualModalStateToggle" />

        <div class="visualSamplesModal">
            <h2>Visual Only Samples</h2>
            <span style="margin-bottom:10px;">Modifying these will overwrite the calculated classifications</span>
            <div style="display:flex; flex-direction:row; gap:25px; font-weight:600; justify-content:space-between; width:100%">
                <span>Sample Number</span>
                <span>Classification</span>
            </div>
            <EditForm class="blazorForm" style="display:flex; flex-direction:column;" autocomplete="off" Model="@listState.soilSamples" OnValidSubmit="VisualModalStateToggle">

                @if (listState.soilSamples != null)
                {
                    @foreach (var sample in listState.soilSamples)
                    {
                        <div style="display:flex; flex-direction:row; justify-content:space-between; width: 100%;">
                            <label>@sample.SampleID</label>
                            <InputText class="visualSampleInput" style="margin-left:40px;" inputmode="decimal" id="BaseSample" @bind-Value="@sample.SoilClassification" />
                        </div>
                    }
                }
                <button class="btn btn-primary" style="margin-top: 20px;" type="submit">Save</button>
            </EditForm>
        </div>
    </div>
}

<div class="fileInputContainer">
    <h1>Import Data</h1>
    <InputFile OnChange="@LoadFiles" />

    <div style="display:flex; flex-direction: row; gap: 20px;">
        <button class="btn btn-primary" @onclick="LoadDemoData">Load Demo Data</button>
        @if (listState.soilSamples != null)
        {
            <button class="btn btn-primary" @onclick="GroupedModalStateToggle">Group Samples</button>
            <button class="btn btn-primary" @onclick="VisualModalStateToggle">Visual only Samples</button>
        }
    </div>

    <div>@status</div>



    @if (listState.soilSamples != null)
    {
        <table>
            <tr>
                <th>Sample ID</th>
                <th>Chainage</th>
                <th>Bore Hole No.</th>
                <th>Offset</th>
                <th>Depth</th>
                <th>Surface Type</th>
                <th>53mm</th>
                <th>19mm</th>
                <th>4.75mm</th>
                <th>2.36mm</th>
                <th>0.425mm</th>
                <th>0.075mm</th>
                <th>Moisture %</th>
                <th>Plastic Limit</th>
                <th>Plasticity Index</th>
                <th>Linear Shrinkage</th>
                <th>Liquid Limit</th>
                <th>Color</th>
                <th>Soil Classification</th>
            </tr>

            @foreach (var sample in listState.soilSamples)
            {
                <tr>
                    <td>@sample.SampleID</td>
                    <td>@sample.Chainage</td>
                    <td>@sample.BoreNumber</td>
                    <td>@sample.Offset</td>
                    <td>@sample.Depth</td>
                    <td>@sample.SurfaceType</td>
                    <td>@sample.Sieve53</td>
                    <td>@sample.Sieve19</td>
                    <td>@sample.Sieve475</td>
                    <td>@sample.Sieve236</td>
                    <td>@sample.Sieve425</td>
                    <td>@sample.Sieve075</td>
                    <td>@sample.MoistureContent</td>
                    <td>@sample.PlasticLimit</td>
                    <td>@sample.PlasticityIndex</td>
                    <td>@sample.LinearShrinkage</td>
                    <td>@sample.LiquidLimit</td>
                    <td>@sample.Colour</td>
                    <td>@sample.SoilClassification</td>
                </tr>
            }
        </table>
    }
</div>


@code {
    bool showGroupedModal = false;
    bool showVisualModal = false;
    string status = "Waiting for file";

    private void GroupedModalStateToggle()
    {
        showGroupedModal = !showGroupedModal;
    }

    private void VisualModalStateToggle()
    {
        showVisualModal = !showVisualModal;
    }

    private void AddGroup()
    {
        var groupedSample = new GroupedSample();
        groupedSample.MatchedSamples.Add(new MatchedSample());
        listState.GroupedSamples.Add(groupedSample);
    }

    private void ApplyGroupedSamples()
    {
        // TODO: Convert to LINQ
        foreach (var group in listState.GroupedSamples)
        {
            //get base sample classification
            if (listState.soilSamples != null)
            {
                foreach (var sample in listState.soilSamples)
                {
                    if (sample.SampleInteger == group.BaseSample)
                    {
                        group.Classification = sample.SoilClassification;

                    }
                }
            }
        }
        //apply to each matched sample classification
        foreach (var group in listState.GroupedSamples)
        {
            foreach (var groupedSample in group.MatchedSamples)
            {
                if (listState.soilSamples != null)
                {
                    foreach (var sample in listState.soilSamples)
                    {
                        if (groupedSample.SingleMatchedSample == sample.SampleInteger)
                        {
                            sample.SoilClassification = group.Classification;

                        }
                    }
                }
            }
        }
        //Re-sort the bores as new classifications have been added
        SortBores();
        GroupedModalStateToggle();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        status = "File Loaded";
        IBrowserFile loadedFile = e.File;

        using (var memoryStream = new MemoryStream())
        {
            // Blazor InputFile doesnt support synchronous reads, requires async
            await loadedFile.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);

            using (var reader = new StreamReader(memoryStream))
            {
                using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                {
                    csv.Context.RegisterClassMap<SampleMap>();
                    listState.soilSamples = csv.GetRecords<SoilSample>().ToList();
                }
            }
        }
        var imageData = await Http.GetByteArrayAsync("assets/NATA.jpg");
        listState.NataLogo = imageData;
        listState.GroupedSamples.Clear();
        HandleSamples();
        SortBores();
    }

    private async Task LoadDemoData()
    {
        using var memoryStream = await Http.GetStreamAsync("assets/DemoData.csv");
        using (var reader = new StreamReader(memoryStream))
        {
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                csv.Context.RegisterClassMap<SampleMap>();
                listState.soilSamples = csv.GetRecords<SoilSample>().ToList();
            }
        }
        var imageData = await Http.GetByteArrayAsync("assets/NATA.jpg");
        listState.NataLogo = imageData;
        listState.GroupedSamples.Clear();
        HandleSamples();
        SortBores();
    }
    private void HandleSamples()
    {
        if (listState.soilSamples != null)
        {
            //TODO: Implement grouped samples
            foreach (var sample in listState.soilSamples)
            {
                if (sample.SampleID != null)
                {
                    sample.SampleInteger = int.Parse(sample.SampleID.Split("-")[1]);
                }

                if (string.IsNullOrEmpty(sample.Sieve53)
                 && string.IsNullOrEmpty(sample.Sieve19)
                 && string.IsNullOrEmpty(sample.Sieve475)
                 && string.IsNullOrEmpty(sample.Sieve236)
                 && string.IsNullOrEmpty(sample.Sieve425)
                 && string.IsNullOrEmpty(sample.Sieve075)
                 && string.IsNullOrEmpty(sample.PlasticLimit)
                 && string.IsNullOrEmpty(sample.LiquidLimit)
                 && string.IsNullOrEmpty(sample.PlasticityIndex)
                 && string.IsNullOrEmpty(sample.LinearShrinkage))
                {
                    sample.SoilClassification = "";
                }
                else
                {
                    bool validSample = true;
                    double finePercent;
                    double plasticLimit;
                    double liquidLimit;
                    double gravelPercent = 0.0;
                    double sieve236;
                    bool nonPlastic = false;

                    if (!double.TryParse(sample.Sieve236, out sieve236))
                    {
                        validSample = false;
                    }
                    else
                    {
                        gravelPercent = 100.0 - sieve236;
                    }

                    if (!double.TryParse(sample.Sieve075, out finePercent))
                    {
                        validSample = false;
                    }
                    double.TryParse(sample.PlasticLimit, out plasticLimit);
                    double.TryParse(sample.LiquidLimit, out liquidLimit);


                    if (sample.PlasticLimit == "Not Obtainable" && sample.LiquidLimit == "Not Obtainable" && sample.PlasticityIndex == "Non Plastic")
                    {
                        nonPlastic = true;
                        sample.PIRemarks = "NP";
                        sample.PlasticLimit = "";
                        sample.LiquidLimit = "";
                        sample.PlasticityIndex = "";
                    }
                    else if (validSample == false)
                    {
                        sample.SoilClassification = "Invalid Data";
                    }
                    else
                    {
                        // Parse issue?
                        if (sample.PlasticityIndex != null && double.Parse(sample.PlasticityIndex) != 0 && sample.Sieve425 != null)
                        {
                            sample.WeightedPlasticityIndex = Convert.ToString(double.Parse(sample.Sieve425) * double.Parse(sample.PlasticityIndex));
                        }

                        sample.SoilClassification = Classification(finePercent, gravelPercent,
                                plasticLimit, liquidLimit, nonPlastic);
                    }
                }
            }
        }
    }

    private void SortBores()
    {
        //TODO: Consider A/B Holes (int vs string)
        //TODO: Catch layout exception if sample depths are not correct
        listState.BoreHoleList.Clear();

        var graphColors = new Dictionary<int, string>()
        {
            {1, "973104"},
            {2, "fdca99"},
            {3, "973104"},
            {4, "666697"},
            {5, "4c1902"},
            {6, "973104"},
            {7, "666697"}
        };

        var groupBoresQuery =
            from sample in listState.soilSamples
            group sample by sample.BoreNumber into newGroup
            orderby int.Parse(newGroup.Key)
            select newGroup;
        foreach (var group in groupBoresQuery)
        {
            //Console.WriteLine(group.Key);
            var hasRun = false;
            int count = 1;
            var tempBoreHole = new BoreHole();
            tempBoreHole.BoreNumber = group.Key;

            foreach (var sample in group)
            {
                //Console.WriteLine(sample.Depth);
                if (!hasRun)
                {
                    tempBoreHole.Chainage = sample.Chainage;
                    tempBoreHole.Offset = sample.Offset;
                    hasRun = true;
                }



                var tempLayer = new Layer();
                tempLayer.GraphColor = "fdca99";
                if (sample.Depth != null)
                {
                    string[] depthRange = sample.Depth.Split("-");
                    tempLayer.Height = float.Parse(depthRange[1]) - float.Parse(depthRange[0]);
                }
                tempLayer.SurfaceType = sample.SurfaceType;
                tempLayer.MoistureContent = sample.MoistureContent;

                if (sample.SurfaceType == "AC")
                {
                    tempLayer.GraphColor = "000000";
                    count += 1;
                }
                else
                {
                    tempLayer.GraphColor = graphColors[count];
                    count += 1;
                }
                tempLayer.SoilColor = sample.Colour;
                tempLayer.SoilClassification = sample.SoilClassification;
                tempBoreHole.LayerList.Add(tempLayer);
            }
            listState.BoreHoleList.Add(tempBoreHole);
        }
    }
}
