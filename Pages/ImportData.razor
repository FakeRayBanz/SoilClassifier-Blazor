@page "/importdata"
@using SoilClassifier_Blazor.Models
@using System.IO
@using CsvHelper
@using System.Globalization

@inject HttpClient Http

<PageTitle>Soil Classifier Import</PageTitle>
<div class="fileInputContainer">
    <h1>Import Data</h1>
    <InputFile OnChange="@LoadFiles" />
    <button class="btn btn-primary" @onclick="LoadDemoData">Load Demo Data</button>
    <div>@status</div>

    @if (listState.soilSamples != null)
    {
        <table>
            <tr>
                <th>Sample ID</th>
                <th>Chainage</th>
                <th>Bore Hole No.</th>
                <th>Offset</th>
                <th>Depth</th>
                <th>Surface Type</th>
                <th>53mm</th>
                <th>19mm</th>
                <th>4.75mm</th>
                <th>2.36mm</th>
                <th>0.425mm</th>
                <th>0.075mm</th>
                <th>Moisture %</th>
                <th>Plastic Limit</th>
                <th>Plasticity Index</th>
                <th>Linear Shrinkage</th>
                <th>Liquid Limit</th>
                <th>Color</th>
                <th>Soil Classification</th>
            </tr>

            @foreach (var sample in listState.soilSamples)
            {
                <tr>
                    <td>@sample.SampleID</td>
                    <td>@sample.Chainage</td>
                    <td>@sample.BoreNumber</td>
                    <td>@sample.Offset</td>
                    <td>@sample.Depth</td>
                    <td>@sample.SurfaceType</td>
                    <td>@sample.Sieve53</td>
                    <td>@sample.Sieve19</td>
                    <td>@sample.Sieve475</td>
                    <td>@sample.Sieve236</td>
                    <td>@sample.Sieve425</td>
                    <td>@sample.Sieve075</td>
                    <td>@sample.MoistureContent</td>
                    <td>@sample.PlasticLimit</td>
                    <td>@sample.PlasticityIndex</td>
                    <td>@sample.LinearShrinkage</td>
                    <td>@sample.LiquidLimit</td>
                    <td>@sample.Colour</td>
                    <td>@sample.SoilClassification</td>
                </tr>
            }
        </table>
    }
</div>


@code {

    @inject ListState listState;

    string status = "Waiting for file";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        status = "File Loaded";
        IBrowserFile loadedFile = e.File;
        
        using (var memoryStream = new MemoryStream())
        {
            // Blazor InputFile doesnt support synchronous reads, requires async
            await loadedFile.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);

            using (var reader = new StreamReader(memoryStream))
            {
                using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                {
                    csv.Context.RegisterClassMap<SampleMap>();
                    listState.soilSamples = csv.GetRecords<SoilSample>().ToList();
                }
            }
        }
        HandleSamples();
    }

    private async Task LoadDemoData()
    {
        using var memoryStream = await Http.GetStreamAsync("assets/DemoData.csv");
        using (var reader = new StreamReader(memoryStream))
        {
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                csv.Context.RegisterClassMap<SampleMap>();
                listState.soilSamples = csv.GetRecords<SoilSample>().ToList();
            }
        }
        HandleSamples();
    }
    private void HandleSamples()
    {
        if (listState.soilSamples != null)
        {
            //TODO: Implement grouped samples
            foreach (var sample in listState.soilSamples)
            {
                if (string.IsNullOrEmpty(sample.Sieve53)
                 && string.IsNullOrEmpty(sample.Sieve19)
                 && string.IsNullOrEmpty(sample.Sieve475)
                 && string.IsNullOrEmpty(sample.Sieve236)
                 && string.IsNullOrEmpty(sample.Sieve425)
                 && string.IsNullOrEmpty(sample.Sieve075)
                 && string.IsNullOrEmpty(sample.PlasticLimit)
                 && string.IsNullOrEmpty(sample.LiquidLimit)
                 && string.IsNullOrEmpty(sample.PlasticityIndex)
                 && string.IsNullOrEmpty(sample.LinearShrinkage))
                {
                    sample.SoilClassification = "";
                }
                else
                {
                    bool validSample = true;
                    double finePercent;
                    double plasticLimit;
                    double liquidLimit;
                    double gravelPercent = 0.0;
                    double sieve236;

                    if (!double.TryParse(sample.Sieve236, out sieve236))
                    {
                        validSample = false;
                    }
                    else
                    {
                        gravelPercent = 100.0 - sieve236;
                    }

                    if (!double.TryParse(sample.Sieve075, out finePercent))
                    {
                        validSample = false;
                    }
                    if (!double.TryParse(sample.PlasticLimit, out plasticLimit))
                    {
                        validSample = false;
                    }
                    if (!double.TryParse(sample.LiquidLimit, out liquidLimit))
                    {
                        validSample = false;
                    }

                    if (validSample == false)
                    {
                        sample.SoilClassification = "Invalid Data";
                    }
                    else
                    {
                        sample.SoilClassification = Classification(finePercent, gravelPercent,
                                plasticLimit, liquidLimit);
                    }
                }
            }
        }
    }
}
