@page "/exportreport"
@using System.Diagnostics
@using QuestPDF.Drawing
@using QuestPDF.Fluent
@using QuestPDF

@inject IJSRuntime JS
@inject HttpClient Http
@inject ListState listState

<PageTitle>Export Report</PageTitle>

<h1>Export Report</h1>
@if (listState.soilSamples != null)
{
    <p>Please enter details about the project.</p>
    <button class="btn btn-primary" @onclick="LoadDemoData">Load Demo Data</button>
}
else
{
    <div class="importDataWarning">
        Please import data first
    </div>
}

<EditForm class="blazorForm" autocomplete="off" Model="@listState" OnValidSubmit="ExportPDF">
    <FluentValidationValidator @ref="fluentValidationValidator" />

    <div class="reportInputGroup">
        <div class="reportInputContainer">
            <label for="ProjectName">Street Name and Suburb</label>
            <ValidationMessage For="() => listState.ProjectName" />
            <InputText id="ProjectName" @bind-Value="listState.ProjectName" />
        </div>
        <div class="reportInputContainer">
            <label for="ProjectNumber">Work Package Number</label>
            <ValidationMessage For="() => listState.ProjectNumber" />
            <InputText id="ProjectNumber" @bind-Value="listState.ProjectNumber" />
        </div>
        <div class="reportInputContainer">
            <label for="ReportNumber">Report Number (WR)</label>
            <ValidationMessage For="() => listState.ReportNumber" />
            <InputText id="ReportNumber" @bind-Value="listState.ReportNumber" />
        </div>   
        <div class="reportInputContainer">
            <label for="ClientName">Client Name</label>
            <ValidationMessage For="() => listState.ClientName" />
            <InputText id="ClientName" @bind-Value="listState.ClientName" />
        </div>
        <div class="reportInputContainer">
            <label for="Limits">Limits</label>
            <ValidationMessage For="() => listState.Limits" />
            <InputText id="Limits" @bind-Value="listState.Limits" />
        </div>
        <div class="reportInputContainer">
            <label for="ChainageMeasuredFrom">Chainage Measured From</label>
            <ValidationMessage For="() => listState.ChainageMeasuredFrom" />
            <InputText id="ChainageMeasuredFrom" @bind-Value="listState.ChainageMeasuredFrom" />
        </div>
        <div class="reportInputContainer">
            <label for="SampledBy">Sampled By</label>
            <ValidationMessage For="() => listState.SampledBy" />
            <InputText id="SampledBy" @bind-Value="listState.SampledBy" />
        </div>
        <div class="reportInputContainer">
            <label for="SampledDate">Sampled Date</label>
            <ValidationMessage For="() => listState.SampledDate" />
            <InputText id="SampledDate" @bind-Value="listState.SampledDate" />
        </div>
        <div class="reportInputContainer">
            <label for="PreparedBy">Prepared By</label>
            <ValidationMessage For="() => listState.PreparedBy" />
            <InputText id="PreparedBy" @bind-Value="listState.PreparedBy" />
        </div>
        <div class="reportInputContainer">
            <label for="PreparedDate">Prepared Date</label>
            <ValidationMessage For="() => listState.PreparedDate" />
            <InputText id="PreparedDate" @bind-Value="listState.PreparedDate" />
        </div>
        <div class="reportInputContainer">
            <label for="GroupedSamples">Grouped Samples</label>
            <ValidationMessage For="() => listState.GroupedSamples" />
            <InputText id="GroupedSamples" @bind-Value="listState.GroupedSamples" />
        </div>
        <div class="reportInputContainer">
            <label for="SignatoryName">Signatory</label>
            <ValidationMessage For="() => listState.SignatoryName" />
            <InputText id="SignatoryName" @bind-Value="listState.SignatoryName" />
        </div>
        <div class="reportInputContainer">
            <label for="NataNumber">Nata Accreditation Number</label>
            <ValidationMessage For="() => listState.NataNumber" />
            <InputText id="NataNumber" @bind-Value="listState.NataNumber" />
        </div>
        <div class="reportInputContainer">
            <label for="Notes">Notes</label>
            <ValidationMessage For="() => listState.Notes" />
            <InputText id="Notes" @bind-Value="listState.Notes" />
        </div>
    </div>
    @if (listState.soilSamples != null)
    {
        <button class="calcButton" type="submit" style="background-color:@buttonColor;
                    border-color:@buttonBorderColor; color:@buttonTextColor">
            @buttonText
        </button>
    }

</EditForm>

@if (_loading == true)
{
    <div style="display:flex; justify-content:center; align-items:center; gap:10px; padding-top:8px">
        <div class="spinner-border" role="status"></div>
        <span style="font-size:1.3rem">Generating...</span>
    </div>
}


@code {

    string buttonText = "Export Report";
    string buttonColor = "#007aff";
    string buttonBorderColor = "#007aff";
    string buttonTextColor = "white";

    private FluentValidationValidator? fluentValidationValidator;
    bool _loading = false;

    async Task ExportPDF()
    {
        _loading = true;
        using var font = await Http.GetStreamAsync("assets/arial.ttf");
        using var bold = await Http.GetStreamAsync("assets/arialbd.ttf");
        using var italic = await Http.GetStreamAsync("assets/ariali.ttf");
        using var boldItalic = await Http.GetStreamAsync("assets/arialbi.ttf");

        FontManager.RegisterFont(font);
        FontManager.RegisterFont(bold);
        FontManager.RegisterFont(italic);
        FontManager.RegisterFont(boldItalic);
        var document = new SoilReport(listState);
        var fileBytes = document.GeneratePdf();

        var fileProjectName = "";
        if (listState.ProjectName != null)
        {
            fileProjectName = listState.ProjectName.Replace(",", "");
        }
        await JS.InvokeVoidAsync("BlazorDownloadFile", $"LAB - Report - {fileProjectName} - PE - {listState.ProjectNumber}.pdf", "application/pdf", fileBytes);

        _loading = false;
    }

    private void LoadDemoData()
    {
        listState.ProjectName = "Elizabeth Street, Brisbane City";
        listState.ProjectNumber = "MP99";
        listState.ReportNumber = "1234";
        listState.ClientName = "Engineering Department";
        listState.Limits = "Edward Street to Albert Street";
        listState.ChainageMeasuredFrom = "Edward Street";
        listState.SampledBy = "NS, CH";
        listState.SampledDate = "21/07/22";
        listState.PreparedBy = "CH";
        listState.PreparedDate = "02/08/22";
        listState.GroupedSamples = "2,5,17  8,12";
        listState.Notes = "";
        listState.SignatoryName = "John Smith";
        listState.NataNumber = "1234";
    }
}
