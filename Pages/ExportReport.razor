@page "/exportreport"
@using System.Diagnostics
@using QuestPDF.Drawing
@using QuestPDF.Fluent
@using QuestPDF

@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>Export Report</PageTitle>

<h1>Export Report</h1>

<p>Click the button to export your report.</p>

<button @onclick="ExportPDF">Export Report</button>

@code {

    async Task ExportPDF()
    {
        using var calibri = await Http.GetStreamAsync("assets/calibri.ttf");
        using var calibriBold = await Http.GetStreamAsync("assets/calibrib.ttf");
        using var calibriItalic = await Http.GetStreamAsync("assets/calibrii.ttf");

        using var font = await Http.GetStreamAsync("assets/arial.ttf");
        using var bold = await Http.GetStreamAsync("assets/arialbd.ttf");
        using var italic = await Http.GetStreamAsync("assets/ariali.ttf");
        using var boldItalic = await Http.GetStreamAsync("assets/arialbi.ttf");

        FontManager.RegisterFont(calibri);
        FontManager.RegisterFont(calibriBold);
        FontManager.RegisterFont(calibriItalic);

        FontManager.RegisterFont(font);
        FontManager.RegisterFont(bold);
        FontManager.RegisterFont(italic);
        FontManager.RegisterFont(boldItalic);
        var document = new SoilReport();
        var fileBytes = document.GeneratePdf();

        await JS.InvokeVoidAsync("BlazorDownloadFile", "report.pdf", "application/pdf", fileBytes);
    }
}
