@page "/exportreport"
@using System.Diagnostics
@using QuestPDF.Drawing
@using QuestPDF.Fluent
@using QuestPDF

@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>Export Report</PageTitle>

<h1>Export Report</h1>

<p>Click the button to export your report.</p>

@if (_loading == false)
{
    <button @onclick="ExportPDF">Export Report</button>
}
else
{
    <div style="display:flex; justify-content:center; align-items:center; gap:10px">
        <div class="spinner-border" role="status"></div>
        <span style="font-size:1.3rem">Generating...</span>
    </div>
    
}


@code {
    bool _loading = false;

    async Task ExportPDF()
    {
        _loading = true;
        using var font = await Http.GetStreamAsync("assets/arial.ttf");
        using var bold = await Http.GetStreamAsync("assets/arialbd.ttf");
        using var italic = await Http.GetStreamAsync("assets/ariali.ttf");
        using var boldItalic = await Http.GetStreamAsync("assets/arialbi.ttf");

        FontManager.RegisterFont(font);
        FontManager.RegisterFont(bold);
        FontManager.RegisterFont(italic);
        FontManager.RegisterFont(boldItalic);
        var document = new SoilReport();
        var fileBytes = document.GeneratePdf();

        await JS.InvokeVoidAsync("BlazorDownloadFile", "report.pdf", "application/pdf", fileBytes);
        _loading = false;
    }
}
